#ifndef HEURISTIC_H
#define HEURISTIC_H
#include "game.h"
#include <array>
#include <set>

namespace heuristic {
    /*
        1. No move
        2. Number of moves
        3. Connectivity: sum of squares connected to each piece.
        4. Connectivity set: sum of squares connected to each piece without counting the same square twice.
        5. Alone: number of squares owns by the player.
        6. First: number of squares we can reach first in one move.
        7. Influence: number of squares closer to us moving one square in each direction.
        8. Freedom: number of free squares around a stone. 
    */
    enum {
        NO_MOVE_WEIGHT,
        NB_MOVES_OPENING_WEIGHT,
        NB_MOVES_MIDDLE_WEIGHT,
        NB_MOVES_END_WEIGHT,
        CONNECTIVITY_OPENING_WEIGHT,
        CONNECTIVITY_MIDDLE_WEIGHT,
        CONNECTIVITY_END_WEIGHT,
        CONNECTIVITY_SET_OPENING_WEIGHT,
        CONNECTIVITY_SET_MIDDLE_WEIGHT,
        CONNECTIVITY_SET_END_WEIGHT,
        ALONE_OPENING_WEIGHT,
        ALONE_MIDDLE_WEIGHT,
        ALONE_END_WEIGHT,
        FIRST_OPENING_WEIGHT,
        FIRST_MIDDLE_WEIGHT,
        FIRST_END_WEIGHT,
        INFLUENCE_OPENING_WEIGHT,
        INFLUENCE_MIDDLE_WEIGHT,
        INFLUENCE_END_WEIGHT,
        FREEDOM_0_OPENING_WEIGTH,
        FREEDOM_1_OPENING_WEIGTH,
        FREEDOM_2_OPENING_WEIGTH,
        FREEDOM_3_OPENING_WEIGTH,
        FREEDOM_4_OPENING_WEIGTH,
        FREEDOM_5_OPENING_WEIGTH,
        FREEDOM_6_OPENING_WEIGTH,
        FREEDOM_7_OPENING_WEIGTH,
        FREEDOM_8_OPENING_WEIGTH,
        FREEDOM_0_MIDDLE_WEIGTH,
        FREEDOM_1_MIDDLE_WEIGTH,
        FREEDOM_2_MIDDLE_WEIGTH,
        FREEDOM_3_MIDDLE_WEIGTH,
        FREEDOM_4_MIDDLE_WEIGTH,
        FREEDOM_5_MIDDLE_WEIGTH,
        FREEDOM_6_MIDDLE_WEIGTH,
        FREEDOM_7_MIDDLE_WEIGTH,
        FREEDOM_8_MIDDLE_WEIGTH,
        FREEDOM_0_END_WEIGTH,
        FREEDOM_1_END_WEIGTH,
        FREEDOM_2_END_WEIGTH,
        FREEDOM_3_END_WEIGTH,
        FREEDOM_4_END_WEIGTH,
        FREEDOM_5_END_WEIGTH,
        FREEDOM_6_END_WEIGTH,
        FREEDOM_7_END_WEIGTH,
        FREEDOM_8_END_WEIGTH,
        NB_WEIGHTS
    };
    constexpr int16_t MAX_VALUE = 30000;
    constexpr int16_t MIN_VALUE = -MAX_VALUE;
    constexpr uint64_t MIDDLE_GAME = 36;
    constexpr uint64_t END_GAME    = 18; 
    // Weights from Noisy Cross Entropy Method: {-6.32397, 96.29134579720809, 47.49216469401797, 99.53749501299016, 33.96878163896622, 27.08388797097006, 73.18216253233302, -21.21460943406819, -54.42621095436699, -55.10510023804331, 13.47806836791044, 138.6067401548363, -11.78116160894561, 186.1628271616771, 150.7249786018566, 53.54199602550555, 301.5105120906174, 371.8421408591228, 319.7397503539172, -29.07885149830955, 170.1048207494621, -347.4041673225432, 96.12541061236001, 59.47066706628728, 131.1794425801229, 55.34812950731414, -194.0707621439058, -178.4466106109931, -118.3438488417585, -114.302352937307, 76.69680754067346, 187.4609005582567, 140.6406954284249, 121.6688036955905, -130.4798127929584, -398.4935105863272, -391.6225673460466, -197.1740001239349, 97.13265102203192, 249.7516687427828, -98.374250668304, 142.6831013526544, 10.0563385936091, -97.07465868560097, -76.50106482119998, 62.41608463759165}
    // Weights from Nelder Mead:
    constexpr std::array<double, NB_WEIGHTS> WEIGHTS{-6.32397, 96.29134579720809, 47.49216469401797, 99.53749501299016, 33.96878163896622, 27.08388797097006, 73.18216253233302, -21.21460943406819, -54.42621095436699, -55.10510023804331, 13.47806836791044, 138.6067401548363, -11.78116160894561, 186.1628271616771, 150.7249786018566, 53.54199602550555, 301.5105120906174, 371.8421408591228, 319.7397503539172, -29.07885149830955, 170.1048207494621, -347.4041673225432, 96.12541061236001, 59.47066706628728, 131.1794425801229, 55.34812950731414, -194.0707621439058, -178.4466106109931, -118.3438488417585, -114.302352937307, 76.69680754067346, 187.4609005582567, 140.6406954284249, 121.6688036955905, -130.4798127929584, -398.4935105863272, -391.6225673460466, -197.1740001239349, 97.13265102203192, 249.7516687427828, -98.374250668304, 142.6831013526544, 10.0563385936091, -97.07465868560097, -76.50106482119998, 62.41608463759165};
    uint64_t floodfill(uint64_t player_bb, uint64_t free);
    int16_t connectivity(uint8_t player, const Yolah& yolah);
    int16_t connectivity_set(uint64_t player_bb, uint64_t free);        
    int16_t alone(uint8_t player, const Yolah&);
    std::pair<uint64_t, uint64_t> first(const Yolah::MoveList&, const Yolah::MoveList&);
    int16_t blocked(uint8_t player, const Yolah&);
    std::pair<uint64_t, uint64_t> influence(const Yolah&);
    double freedom(uint8_t player, const Yolah&, const std::array<double, NB_WEIGHTS>& weights);
    int16_t eval(uint8_t player, const Yolah&, const std::array<double, NB_WEIGHTS>& weights = WEIGHTS);
    int16_t evaluation(uint8_t player, const Yolah&);

    std::set<int16_t> sampling_heuristic_values(size_t nb_random_games);    
}

#endif
