#ifndef HEURISTIC_H
#define HEURISTIC_H
#include "game.h"
#include <array>
#include <set>

namespace heuristic {
    /*
        1. No move
        2. Number of moves
        3. Connectivity: sum of squares connected to each piece.
        4. Connectivity set: sum of squares connected to each piece without counting the same square twice.
        5. Alone: number of squares owns by the player.
        6. First: number of squares we can reach first in one move.
        7. Influence: number of squares closer to us moving one square in each direction.
        8. Freedom: number of free squares around a stone. 
    */
    enum {
        NO_MOVE_WEIGHT,
        NB_MOVES_OPENING_WEIGHT,
        NB_MOVES_MIDDLE_WEIGHT,
        NB_MOVES_END_WEIGHT,
        CONNECTIVITY_OPENING_WEIGHT,
        CONNECTIVITY_MIDDLE_WEIGHT,
        CONNECTIVITY_END_WEIGHT,
        CONNECTIVITY_SET_OPENING_WEIGHT,
        CONNECTIVITY_SET_MIDDLE_WEIGHT,
        CONNECTIVITY_SET_END_WEIGHT,
        ALONE_OPENING_WEIGHT,
        ALONE_MIDDLE_WEIGHT,
        ALONE_END_WEIGHT,
        FIRST_OPENING_WEIGHT,
        FIRST_MIDDLE_WEIGHT,
        FIRST_END_WEIGHT,
        INFLUENCE_OPENING_WEIGHT,
        INFLUENCE_MIDDLE_WEIGHT,
        INFLUENCE_END_WEIGHT,
        FREEDOM_0_OPENING_WEIGTH,
        FREEDOM_1_OPENING_WEIGTH,
        FREEDOM_2_OPENING_WEIGTH,
        FREEDOM_3_OPENING_WEIGTH,
        FREEDOM_4_OPENING_WEIGTH,
        FREEDOM_5_OPENING_WEIGTH,
        FREEDOM_6_OPENING_WEIGTH,
        FREEDOM_7_OPENING_WEIGTH,
        FREEDOM_8_OPENING_WEIGTH,
        FREEDOM_0_MIDDLE_WEIGTH,
        FREEDOM_1_MIDDLE_WEIGTH,
        FREEDOM_2_MIDDLE_WEIGTH,
        FREEDOM_3_MIDDLE_WEIGTH,
        FREEDOM_4_MIDDLE_WEIGTH,
        FREEDOM_5_MIDDLE_WEIGTH,
        FREEDOM_6_MIDDLE_WEIGTH,
        FREEDOM_7_MIDDLE_WEIGTH,
        FREEDOM_8_MIDDLE_WEIGTH,
        FREEDOM_0_END_WEIGTH,
        FREEDOM_1_END_WEIGTH,
        FREEDOM_2_END_WEIGTH,
        FREEDOM_3_END_WEIGTH,
        FREEDOM_4_END_WEIGTH,
        FREEDOM_5_END_WEIGTH,
        FREEDOM_6_END_WEIGTH,
        FREEDOM_7_END_WEIGTH,
        FREEDOM_8_END_WEIGTH,
        NB_WEIGHTS
    };
    constexpr int16_t MAX_VALUE = 30000;
    constexpr int16_t MIN_VALUE = -MAX_VALUE;
    constexpr uint64_t MIDDLE_GAME = 36;
    constexpr uint64_t END_GAME    = 18; 
    // Weights from Noisy Cross Entropy Method: {-277.108, 142.193893489657, 142.584277814301, -117.6717883751547, 107.1563469489577, 40.59476758916619, 128.4925478414285, -518.4020193040536, -224.0209505404123, -17.08744459127947, 136.2468402086275, 261.0075939686621, 314.0783572892569, 271.9917630182447, 149.4302588014587, 126.7587335947779, 474.4009403142998, 715.1417958422134, 913.5612685590646, -171.1934085907059, -976.4789027288631, 63.24880988234823, -386.1701040708617, 343.4002881041962, 282.4490642686596, -134.7402628511411, -298.0041038380612, -371.1386407953464, -641.6281879825533, -105.2183813613418, 278.9687264075095, 592.7081279057317, 377.4933744872052, 225.8286921286923, -613.2933887521617, -736.0381986195573, -991.1993361036077, -386.5213437968281, 268.9699704536527, -110.2022748673798, 171.0462338115501, 133.0766969881873, 47.13055579253391, -307.0114227524336, -270.5042971473602, -270.9437469877694}
    // Weights from Nelder Mead:
    constexpr std::array<double, NB_WEIGHTS> WEIGHTS {
        -255.745, 81.62132957543031, 91.57609768985716, -177.6773616734466,
        68.16486241472865, 26.70495498502099, 154.383379630677,
        -530.8242077186487, -313.2023757332665, -43.87849657315125,
        172.0314980997644, 326.4480489128537, 310.909906521125,
        230.0669166683616, 220.9179293732371, 289.5340889519555,
        387.3041149887017, 825.3446537589967, 1028.305233286851,
        -180.1927551775643, -1069.837309882286, -14.56689415550916,
        -345.1710839652004, 375.3764302746833, 291.2553310488145,
        -137.9246980219349, -288.4070807306961, -289.8783023241542,
        -666.1384943743948, -112.2225426176193, 369.0052859270172,
        552.4179521303455, 517.3756779669266, -2.68655764395052,
        -725.3576607550269, -784.0368752945366, -1084.969212245822,
        -563.2524584917178, 237.5401061901083, -108.1002928009579,
        177.788676880064, 277.559496857502, -48.35322675721582,
        -342.6502992564743, -288.0894324261568, -705.161239285647
    };
// {-206.615, 214.0711841981137, 140.6928368294632, -143.5509731269074,
// 97.05169984023902, 36.26557517608595, 247.741638170699,
// -543.1864230357963, -215.2204894980264, 20.9006521754753,
// 64.29406247068624, 319.9955653658794, 390.904318326331,
// 317.8035878113246, 148.6292028535376, 156.4498869609003,
// 471.8990345104593, 728.1597620795485, 978.4335171474117,
// -193.4373751107387, -952.8807995683095, 27.12277277289272,
// -316.8838240530698, 364.3720132787073, 312.0295297100168,
// -123.2901724216414, -229.2299708221696, -381.1586248550514,
// -639.3897930737013, -104.9217479946167, 291.5964342717476,
// 662.7859078544177, 431.1871690011779, 150.7215968488467,
// -607.4962511504064, -772.4448498735724, -984.1145134619187,
// -417.0037393920991, 247.0697635649428, -45.24536078289178,
// 65.1009371625028, 58.44929416162745, 58.47936916472027,
// -246.029808819559, -168.7717661516405, -343.6305942569464};
    uint64_t floodfill(uint64_t player_bb, uint64_t free);
    int16_t connectivity(uint8_t player, const Yolah& yolah);
    int16_t connectivity_set(uint64_t player_bb, uint64_t free);        
    int16_t alone(uint8_t player, const Yolah&);
    std::pair<uint64_t, uint64_t> first(const Yolah::MoveList&, const Yolah::MoveList&);
    int16_t blocked(uint8_t player, const Yolah&);
    std::pair<uint64_t, uint64_t> influence(const Yolah&);
    double freedom(uint8_t player, const Yolah&, const std::array<double, NB_WEIGHTS>& weights);
    int16_t eval(uint8_t player, const Yolah&, const std::array<double, NB_WEIGHTS>& weights = WEIGHTS);
    int16_t evaluation(uint8_t player, const Yolah&);

    std::set<int16_t> sampling_heuristic_values(size_t nb_random_games);    
}

#endif
